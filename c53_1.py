from my_token import TOKEN
# –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ Telegram
from telegram.ext import PreCheckoutQueryHandler

# –ò–º–ø–æ—Ä—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
import os  # –†–∞–±–æ—Ç–∞ —Å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
import logging  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
import time  # –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
import requests  # HTTP-–∑–∞–ø—Ä–æ—Å—ã –∫ API
import datetime  # –†–∞–±–æ—Ç–∞ —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
from dotenv import load_dotenv  # –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞


# –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Telegram API
from telegram import (
    Update,  # –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
    ReplyKeyboardMarkup,  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    KeyboardButton,  # –ö–Ω–æ–ø–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    InlineKeyboardMarkup,  # –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    InlineKeyboardButton  # –ö–Ω–æ–ø–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
)
from telegram.ext import (
    Updater,  # –Ø–¥—Ä–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API
    CommandHandler,  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ (–Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å /)
    CallbackContext,  # –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    MessageHandler,  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    Filters  # –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
)

from yookassa import Configuration, Payment
    # –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Telegram API
from telegram import (
    Update,  # –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
    ReplyKeyboardMarkup,  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    KeyboardButton,  # –ö–Ω–æ–ø–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    InlineKeyboardMarkup,  # –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    InlineKeyboardButton,  # –ö–Ω–æ–ø–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    
    LabeledPrice  # –¶–µ–Ω–∞ –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
    )

# –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)

load_dotenv(dotenv_path='env_vars')
subscriptions = {}

def start(update: Update, context: CallbackContext) -> None:
    logger.info(f'command /start getten')

    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/yandex - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å YandexGPT\n"
        "/sber - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å SberAI (GigaChat)\n"
        "/clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞\n\n"
        "/buy - –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É (200 —Ä—É–±/–º–µ—Å)\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º!"    )
    
    keyboard = [
        [KeyboardButton("/yandex"), KeyboardButton("/sber")],
        [KeyboardButton("/clear"), KeyboardButton("/buy")]
    ]

    update.message.reply_text(
        help_text,
        reply_markup=ReplyKeyboardMarkup(
            keyboard,
            resize_keyboard=True,
            one_time_keyboard=False
        )
    )

class RussianAI:
    # –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞
    def __init__(self):
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.provider = os.getenv("DEFAULT_PROVIDER", "yandexgpt")
         # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –∫–∞–∫ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞
        self.conversation_history = []
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        self.set_provider(self.provider)

    def set_provider(self, provider: str):
        self.provider = provider.lower() # –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
        # –°–±—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        self.conversation_history = []

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è YandexGPT
        if self.provider == "yandexgpt":
            # –ü–æ–ª—É—á–µ–Ω–∏–µ API-–∫–ª—é—á–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            self.api_key = os.getenv("YANDEX_API_KEY")
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ Yandex Cloud
            self.folder_id = os.getenv("YANDEX_FOLDER_ID")
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "yandexgpt-lite")
            self.model = os.getenv("YANDEX_MODEL", "yandexgpt-lite")
            # URL API YandexGPT
            self.base_url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π
            if not self.api_key or not self.folder_id:
                # –ó–∞–ø–∏—Å—å –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥
                logger.error("–ù–µ –∑–∞–¥–∞–Ω—ã YANDEX_API_KEY –∏ YANDEX_FOLDER_ID")
                return False # –í–æ–∑–≤—Ä–∞—Ç —Å—Ç–∞—Ç—É—Å–∞ –æ—à–∏–±–∫–∏
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è SberAI (GigaChat)
        elif self.provider == "sberai":
             # –ü–æ–ª—É—á–µ–Ω–∏–µ API-–∫–ª—é—á–∞ SberAI
            self.api_key = os.getenv("SBER_API_KEY")
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "GigaChat:latest")
            self.model = os.getenv("SBER_MODEL", "GigaChat:latest")
            # URL API SberAI
            self.base_url = "https://api.gigachat.dev/v1/chat/completions"
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API-–∫–ª—é—á–∞
            if not self.api_key:
                logger.error("–ù–µ –∑–∞–¥–∞–Ω SBER_API_KEY")
                return False
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        else:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider}")
            return False

        # –ó–∞–ø–∏—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ –≤ –ª–æ–≥
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {self.provider.upper()} ({self.model})")
        return True  # –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

    # –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
    def add_message(self, role: str, content: str)-> None:
        self.conversation_history.append({"role": role, "content": content})

    # –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥
    def generate_response(self, user_input: str, user_id:int):
        # :param user_input: –í—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        # :return: –û—Ç–≤–µ—Ç AI –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        if not self.check_subscription(user_id):
            return ("‚ùå –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.\n\n"
                    "/buy - –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É (200 —Ä—É–±/–º–µ—Å)")

        self.add_message("user", user_input)
        try:
            # –í—ã–±–æ—Ä —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –º–µ—Ç–æ–¥–∞ API –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            if self.provider == "yandexgpt":
                return self._yandex_request()
            elif self.provider == "sberai":
                return self._sber_request()

        except Exception as e:
            return f"üö® –û—à–∏–±–∫–∞ API ({self.provider}): {str(e)}"
        
    # –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API YandexGPT
    def _yandex_request(self):
        headers = {
            "Authorization": f"Api-Key {self.api_key}",  # API-–∫–ª—é—á –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            "Content-Type": "application/json",  # –¢–∏–ø —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            "x-folder-id": self.folder_id  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞—Ç–∞–ª–æ–≥–∞
        }
        yandex_messages = []

        for msg in self.conversation_history:
            yandex_messages.append({
                "role": msg["role"],
                "text": msg["content"]  # Yandex –∏—Å–ø–æ–ª—å–∑—É–µ—Ç "text" –≤–º–µ—Å—Ç–æ "content"
            })    

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ (payload)
        payload = {
            "modelUri": f"gpt://{self.folder_id}/{self.model}",  # URI –º–æ–¥–µ–ª–∏
            "completionOptions": {
                "stream": False,  # –†–µ–∂–∏–º –±–µ–∑ –ø–æ—Ç–æ–∫–æ–≤–æ–π –ø–µ—Ä–µ–¥–∞—á–∏
                "temperature": 0.7,  # –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤
                "maxTokens": 2000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ
            },
            "messages": yandex_messages  # –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞
        }
        try:
            response = requests.post(
                self.base_url,  # URL API
                headers=headers,  # –ó–∞–≥–æ–ª–æ–≤–∫–∏
                json=payload,  # –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
                timeout=30  # –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (30 —Å–µ–∫—É–Ω–¥)
            )
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–≤–µ—Ç–∞
            if response.status_code != 200:
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –Ω–µ–Ω–æ—Ä–º–∞–ª—å–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ
                logger.error(f"–û—à–∏–±–∫–∞ {response.status_code}: {response.text}")
                return f"–û—à–∏–±–∫–∞ API: {response.text}"
            
            data = response.json()
            ai_reply = data["result"]["alternatives"][0]["message"]["text"]
            self.add_message("assistant", ai_reply)
            return ai_reply  # –í–æ–∑–≤—Ä–∞—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}"    

    def _sber_request(self):
        auth_response = requests.post(
            "https://api.gigachat.dev/v1/oauth/token",  # URL –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            headers={"Content-Type": "application/x-www-form-urlencoded"},
            data={
                "grant_type": "urn:ietf:params:oauth:grant-type:jwt-bearer",
                "assertion": self.api_key,  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ API-–∫–ª—é—á–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ JWT
                "scope": "GIGACHAT_API_PERS"  # –û–±–ª–∞—Å—Ç—å –¥–æ—Å—Ç—É–ø–∞
            }
        )
        if auth_response.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ SberAI: {auth_response.text}")
            return "–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ SberAI"
        auth_data = auth_response.json()
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞
        access_token = auth_data["access_token"]
        headers = {
            "Authorization": f"Bearer {access_token}",  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞
            "Content-Type": "application/json"
        }
    # }
        payload = {
            "model": self.model,  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–æ–¥–µ–ª–∏
            "messages": self.conversation_history,  # –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞
            "temperature": 0.7,  # –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤
            "max_tokens": 2000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ
        }
        response = requests.post(
            self.base_url,
            headers=headers,
            json=payload,
            timeout=30
        )

        if response.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ SberAI: {response.status_code} - {response.text}")
            return f"–û—à–∏–±–∫–∞ SberAI: {response.text}"
        data = response.json()
        ai_reply = data["choices"][0]["message"]["content"]
        self.add_message("assistant", ai_reply)

        return ai_reply

    def clear_history(self):
        self.conversation_history = []
        logger.info("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        return True  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    
    def check_subscription(self, user_id: int) -> bool:
        sub = subscriptions.get(user_id)
        if sub and sub['end_date'] > datetime.datetime.now():
                return True
        return False

def switch_to_yandex(update: Update, context: CallbackContext) -> None:
    if ai_assistant.set_provider("yandexgpt"):
        update.message.reply_text(
            f"‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ YandexGPT ({ai_assistant.model})",
            reply_markup=create_keyboard() # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        )
    else:
        update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ YandexGPT")


def switch_to_sber(update: Update, context: CallbackContext) -> None:
    if ai_assistant.set_provider("sberai"):
        update.message.reply_text(
            f"‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ SberAI ({ai_assistant.model})",
            reply_markup=create_keyboard() # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        )
    else:
        update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ SberAI")

def clear_history(update: Update, context: CallbackContext) -> None:
    if ai_assistant.clear_history():
        update.message.reply_text(
            "üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞!",
            reply_markup=create_keyboard() # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        )
    else:
        update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")

def handle_message(update: Update, context: CallbackContext) -> None:
    user_input = update.message.text
    if user_input.startswith('/'):
        return
    user_id = update.message.from_user.id        
    context.bot.send_chat_action(
        chat_id=update.effective_chat.id, # ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
        action="typing"
    )
    start_time = time.time()

    try:
        response = ai_assistant.generate_response(user_input, user_id)
        elapsed_time = time.time() - start_time
        formatted_response = (
            f"ü§ñ {ai_assistant.provider.upper()} –æ—Ç–≤–µ—á–∞–µ—Ç:\n\n"
            f"{response}\n\n"
            f"‚è± –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {elapsed_time:.2f} —Å–µ–∫"
        )
        update.message.reply_text(
            formatted_response,
            reply_markup=create_keyboard() # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–æ–º–∞–Ω–¥
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
        update.message.reply_text(
            "üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=create_keyboard()
        )

def create_keyboard():
    keyboard = [
        [KeyboardButton("/yandex"), KeyboardButton("/sber")],
        [KeyboardButton("/clear"), KeyboardButton("/buy")]
    ]
    return ReplyKeyboardMarkup(
        keyboard,
        resize_keyboard=True,
        one_time_keyboard=False
    )

# subsription&buying
def buy_subscription(update: Update, context: CallbackContext) -> None:
    try:
        user_id = update.message.from_user.id
        if ai_assistant.check_subscription(user_id):
            update.message.reply_text("‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!")
            return
        price = int(os.getenv("SUBSCRIPTION_PRICE", 20000))  # –°—É–º–º–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö (200 —Ä—É–±)
        provider_token = os.getenv("TELEGRAM_PROVIDER_TOKEN")  # –¢–æ–∫–µ–Ω –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞

        logger.info(f"Creating payment for user {user_id}, price: {price}, provider: {provider_token}") 
        context.bot.send_invoice(
            chat_id=update.effective_chat.id,
            title="–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç",
            description="–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –Ω–∞ 30 –¥–Ω–µ–π",
            payload=f"subscription_{user_id}",
            provider_token=provider_token,
            currency="RUB",
            prices=[LabeledPrice("–ü–æ–¥–ø–∏—Å–∫–∞", price)],
            start_parameter="subscription"
        )
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ buy_subscription")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")                               

def successful_payment(update: Update, context: CallbackContext) -> None:
    try:
        user_id = update.message.from_user.id
        payment_info = update.message.successful_payment

        logger.info(f"–£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω: {payment_info}")
        end_date = datetime.datetime.now() + datetime.timedelta(
            days=int(os.getenv("SUBSCRIPTION_DAYS", 30)))
        
        subscriptions[user_id] = {
            'start_date': datetime.datetime.now(),
            'end_date': end_date,
            'status': 'active'
        }
        update.message.reply_text(
            f"üéâ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ {end_date.strftime('%d.%m.%Y')}!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞!"
        )
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ successful_payment")
        update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
        )

def precheckout_handler(update: Update, context: CallbackContext) -> None:
    query = update.pre_checkout_query
    try:
        context.bot.answer_pre_checkout_query(
            pre_checkout_query_id=query.id,
            ok=True
        )
        logger.info(f"PreCheckout –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞: {query.invoice_payload}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ precheckout_handler: {str(e)}")
        context.bot.answer_pre_checkout_query(
            pre_checkout_query_id=query.id,
            ok=False,
            error_message="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞"
        )                                                        

def error_handler(update: Update, context: CallbackContext) -> None:
    logger.error(msg="–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:", exc_info=context.error)
    if update and update.message:
        update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞. –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

def main():
    updater = Updater(TOKEN)
    dispatcher = updater.dispatcher
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("yandex", switch_to_yandex))
    dispatcher.add_handler(CommandHandler("sber", switch_to_sber))
    dispatcher.add_handler(CommandHandler("clear", clear_history))
    dispatcher.add_handler(CommandHandler("buy", buy_subscription)) # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã buy

    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    dispatcher.add_handler(PreCheckoutQueryHandler(precheckout_handler))  # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
    dispatcher.add_handler(MessageHandler(Filters.successful_payment, successful_payment))
    dispatcher.add_error_handler(error_handler)

    updater.start_polling()
 
    print("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –≤ Telegram –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
    updater.idle()

ai_assistant = RussianAI()

if __name__ == '__main__':
    main()