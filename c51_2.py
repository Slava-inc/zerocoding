import logging
from my_token import TOKEN, OPENWEATHER_API_KEY, CBR_API_URL, WEATHER_LOG_PATH, ADMIN_IDS
import requests #–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –≤–Ω–µ—à–Ω–∏–º API
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext,MessageHandler,Filters,ConversationHandler
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
import csv  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å CSV-—Ñ–∞–π–ª–∞–º–∏ (—á—Ç–µ–Ω–∏–µ/–∑–∞–ø–∏—Å—å)
from datetime import datetime  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
import pandas as pd  # –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt  # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
from io import BytesIO  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∏–Ω–∞—Ä–Ω—ã–º–∏ –ø–æ—Ç–æ–∫–∞–º–∏ –≤ –ø–∞–º—è—Ç–∏
import os  # –î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',level=logging.INFO)
level=logging.INFO #–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__) # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–æ–¥—É–ª—è

if not os.path.exists(WEATHER_LOG_PATH):
    with open(WEATHER_LOG_PATH, 'w', newline='', encoding='utf-8') as file:
        writer = csv.writer(file)
        writer.writerow(['timestamp', 'user_id', 'username', 'city', 'status'])
else:
    with open(WEATHER_LOG_PATH, 'r', encoding='utf-8') as f:
        first_line = f.readline().strip()

        if not first_line.startswith('timestamp') or 'user_id' not in first_line:
            with open(WEATHER_LOG_PATH, 'r+', encoding='utf-8') as f:
                content = f.read()
                f.seek(0, 0)
                f.write('timestamp,user_id,username,city,status\n' + content)

def log_weather_request(user_id: int, username: str, city: str, status: str):
    try:
        with open(WEATHER_LOG_PATH, 'a', newline='', encoding='utf-8') as file:
            writer = csv.writer(file) # –î–æ–±–∞–≤–ª—è–µ–º —Å—é–¥–∞ —Å—Ç—Ä–æ–∫—É
            writer.writerow([
                datetime.now(),
                user_id,
                username,
                city,
                status])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥: {e}")



# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –±–æ—Ç–∞ (Conversation Handler)
WAIT_CITY, SHOW_INFO, WAIT_CITY_STATS = range(3)  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞: –æ–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ –ø–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

def create_main_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton("üå§ –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É", callback_data='weather')],
        [
            InlineKeyboardButton("üí∂ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç", callback_data='currency'),
            InlineKeyboardButton("üñ• –ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω", url="https://zerocoder.ru")
        ],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–≥–æ–¥—ã", callback_data='weather_stats')],

    ]
    return InlineKeyboardMarkup(keyboard) # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

def start(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    update.message.reply_text(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –º–µ–Ω—é: ",
        reply_markup=create_main_menu_keyboard()
    )    

def button_click(update: Update, context: CallbackContext) -> None:
    
    logger.debug(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {update.callback_query.data}")
    
    query = update.callback_query # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–∂–∞—Ç–∏–∏
    query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback (—É–±–∏—Ä–∞–µ—Ç "—á–∞—Å–∏–∫–∏" —É –∫–Ω–æ–ø–∫–∏)

    if query.data == "weather":
        query.message.reply_text(
               "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:",
            reply_markup=ReplyKeyboardRemove() # –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        )
        return WAIT_CITY # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
    elif query.data == 'currency':
        show_currency_rates(query) # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∫–∞–∑–∞ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
        return SHOW_INFO # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    elif query.data == 'weather_stats':
        query.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
            reply_markup=ReplyKeyboardRemove()
        )
        return WAIT_CITY_STATS 
    elif query.data == 'back_to_menu':
        query.edit_message_text(
            text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: ",
            reply_markup=create_main_menu_keyboard()
        )
        return ConversationHandler.END # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    elif query.data == 'close':
        query.delete_message()

def cancel (update:Update, context:CallbackContext) ->int:
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=create_main_menu_keyboard()) # –í–æ–∑–≤—Ä–∞—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã 


def get_weather(update:Update, context:CallbackContext) ->int:
    city = update.message.text # –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
    user = update.effective_user
    user_id = user.id if user else 0
    username = user.username or user.first_name or "Unknown"
    try:
        response = requests.get(url) # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        data = response.json() # –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –≤ —Å–ª–æ–≤–∞—Ä—å

        if response.status_code ==200: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
            log_weather_request(user_id, username, city, 'success')
            weather_info = (
                f" –ü–æ–≥–æ–¥–∞ –≤ {city}:\n"
                f" –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data['main']['temp']} ¬∞C\n"
                f" –°–æ—Å—Ç–æ—è–Ω–∏–µ: {data['weather'][0]['description']} \n"
                f" –í–ª–∞–∂–Ω–æ—Å—Ç—å: {data['main']['humidity']} %\n"
                f" –í–µ—Ç–µ—Ä: {data['wind']['speed']} –º/—Å"
            )
                # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
            update.message.reply_text(weather_info,reply_markup=InlineKeyboardMarkup(keyboard))
            return SHOW_INFO # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        else:
            # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω
            log_weather_request(user_id, username, city, 'city_not_found')
            update.message.reply_text(" –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: ")
            return WAIT_CITY # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≥–æ—Ä–æ–¥–∞
    except Exception as e:
        log_weather_request(user_id, username, city, 'error')
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ: {e}") # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
        return ConversationHandler.END #–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞

def show_currency_rates(query):
    try:
        response = requests.get(CBR_API_URL) # API –∑–∞–ø—Ä–æ—Å –∫ –¶–ë
        data = response.json() # –ü–∞—Ä—Å–∏–Ω–≥ JSON-–æ—Ç–≤–µ—Ç–∞
        rates = data['Valute'] # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–ª—é—Ç–∞—Ö
        text = (
            f"–ö—É—Ä—Å—ã –¶–ë –†–§:\n"
            f"–î–æ–ª–ª–∞—Ä USA: {rates['USD']['Value']:.2f} ‚ÇΩ\n"
                        f"–ï–≤—Ä–æ: {rates['EUR']['Value']:.2f} ‚ÇΩ\n"
            f"–Æ–∞–Ω—å: {rates['CNY']['Value']:.2f} ‚ÇΩ\n"
        )
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
        query.edit_message_text(
            text=text, reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç: {e}") # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        query.edit_message_text ("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç") # –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –±–æ—Ç–∞

def weather_stats(update: Update, context: CallbackContext):
    if update.effective_user.id not in ADMIN_IDS:
        update.message.reply_text("‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    if not os.path.exists(WEATHER_LOG_PATH) or os.path.getsize(WEATHER_LOG_PATH) == 0:
        update.message.reply_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ó–∞–ø—Ä–æ—Å—ã –µ—â–µ –Ω–µ –¥–µ–ª–∞–ª–∏—Å—å.")
        return    
    logs = []
    with open(WEATHER_LOG_PATH, 'r', encoding='utf-8') as f:
        reader = csv.reader(f)
        next(reader, None)  
        for row in reader:
            if not row:
                continue
            if len(row) < 5:
                    row += [''] * (5 - len(row))
            logs.append(row[:5])

        df = pd.DataFrame(logs, columns=['timestamp', 'user_id', 'username', 'city', 'status'])
        if df.empty:
            update.message.reply_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
            return
        df['user_id'] = pd.to_numeric(df['user_id'], errors='coerce')
        total_requests = len(df)
        status_counts = df['status'].value_counts()
        success_requests = status_counts.get('success', 0)  # –£—Å–ø–µ—à–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        error_requests = status_counts.get('error', 0)  # –û—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
        city_not_found = status_counts.get('city_not_found', 0)  # –ì–æ—Ä–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
        unique_users = df['user_id'].nunique()  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        popular_cities = df[df['status'] == 'success']['city'].value_counts().head(5)

        report = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–≥–æ–¥—ã:\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}\n"
            f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {success_requests}\n"
            f"‚Ä¢ –û—à–∏–±–æ–∫ '–≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω': {city_not_found}\n"
            f"‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã—Ö –æ—à–∏–±–æ–∫: {error_requests}\n"
            f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {unique_users}\n\n"
            f"üèôÔ∏è –¢–æ–ø-5 –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã—Ö –≥–æ—Ä–æ–¥–æ–≤:\n"        ) 
        if not popular_cities.empty:
            for city, count in popular_cities.items():
                report += f"  - {city}: {count}\n"
        else:
            report += "  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≥–æ—Ä–æ–¥–∞—Ö\n"                     

        try:
            df['timestamp'] = pd.to_datetime(df['timestamp'], errors='coerce')
            df = df.dropna(subset=['timestamp'])
            if not df.empty:
                df['date'] = df['timestamp'].dt.date
                daily_activity = df.groupby('date').size().reset_index(name='requests')
                daily_activity = daily_activity.sort_values('date', ascending=False).head(7)
                if not daily_activity.empty:
                    report += "\nüìÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:\n"
                    for _, row in daily_activity.iterrows():
                        report += f"  {row['date']}: {row['requests']} –∑–∞–ø—Ä–æ—Å–æ–≤\n"
                else:
                    report += "\nüìÖ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
            else:
                report += "\nüìÖ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
            report += "\nüìÖ –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n"
        update.message.reply_text(report)
        try:
            if not popular_cities.empty:
                plt.figure(figsize=(10, 6))
                popular_cities.plot(kind='bar', color='skyblue')
                plt.title('–¢–æ–ø –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã—Ö –≥–æ—Ä–æ–¥–æ–≤')
                plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤')
                plt.xticks(rotation=45, ha='right')
                plt.tight_layout() 
                buf = BytesIO()
                plt.savefig(buf, format='png', dpi=80)
                buf.seek(0)
                update.message.reply_photo(photo=buf)
                buf.close()
                plt.close()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", exc_info=True)
            update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞")                                   

def main():
    logger.setLevel(logging.DEBUG)  # –í –Ω–∞—á–∞–ª–µ main()
    updater = Updater(TOKEN)
    dispatcher = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_click, pattern='^weather$')],
        states={
            WAIT_CITY: [MessageHandler(Filters.text & ~Filters.command, get_weather)],
            SHOW_INFO: [CallbackQueryHandler(button_click)]
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        allow_reentry=True
    )

    conv_handler_weather_stats = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_click, pattern='^weather_stats$')],
        states={
            WAIT_CITY_STATS: [MessageHandler(Filters.text & ~Filters.command, weather_stats)],
            SHOW_INFO: [CallbackQueryHandler(button_click)]
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        allow_reentry=True,
        name="conv_weather_stats"
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º conversation handlers –ü–ï–†–í–´–ú–ò!
    dispatcher.add_handler(conv_handler)
    dispatcher.add_handler(conv_handler_weather_stats)

    # –¢–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–±–µ–∑ –æ–±—â–µ–≥–æ handler)
    dispatcher.add_handler(CallbackQueryHandler(button_click, pattern='^(currency|back_to_menu|close)$'))

    # –ö–æ–º–∞–Ω–¥—ã
    dispatcher.add_handler(CommandHandler("start", start))

    updater.start_polling()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

if __name__ == '__main__':    
    main()